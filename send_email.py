import email_auth
import uuid
import settings_mapper

def company_signoff() -> None:
    return f"""
    Yours sincerely<br>
    <b>{settings_mapper.MESSAGING_METADATA["SENDER_NAME"]}</b><br>
    The {settings_mapper.MESSAGING_METADATA["SENDER_DEPARTMENT"]} Team<br>
    {settings_mapper.MESSAGING_METADATA["SENDER_EMAIL"]}<br><br>
    return
    """

def send_message(latest_commit_data:set) -> None:
    """
    Sends an email notification containing a summary of the latest GitHub commit data.
    Args:
        latest_commit_data (set): A set of dictionaries, each containing information about a GitHub commit.
            Each dictionary should have the following keys:
                - 'sha': The commit's SHA hash (string).
                - 'repo': The name of the repository (string).
                - 'date': The commit date (string).
                - 'message': The commit message (string).
                - 'author_id': The author's identifier (string).
    Returns:
        None
    The function formats the commit data into an HTML table and sends it as the body of an email.
    The email subject is set to "Github Commit Report". If the email fails to send, the function returns None.
    """
    
    custom_subject  =   "Github Commit Report"
    
    resource_data_table = ""
    for data in latest_commit_data:
            resource_data_table += f"""
            ========================================================================<br>
            <table border="0" cellpadding="5" cellspacing="0" style="border-collapse: collapse; text-align: left;">
                <tr>
                    <th>Secure Hash Algorithm (SHA):</th>
                    <td>{data["sha"][:7]}</td>
                </tr>
                <tr>
                    <th>Repository Name:</th>
                    <td>{data['repo']}</td>
                </tr>
                <tr>
                    <th>Commit Date:</th>
                    <td>{data['date']}</td>
                </tr>
                <tr>
                    <th>Commit message:</th>
                    <td>{data['message']}</td>
                </tr>
                <tr>
                    <th>Author ID:</th>
                    <td>{data['author_id']}</td>
                </tr>
            </table>
            """    
            
    message_body = f"""
    Dear {settings_mapper.MESSAGING_METADATA["REQUESTER_NAME"]}<br><br>
    We are writing to you because you have a new commit uploaded to your GitHub repository.
    {resource_data_table}
    ========================================================================<br>
    * You must be logged into the GitHub Repository in order to see the list of commits within the API call.<br><br>
    {company_signoff()}
    """
    if not email_auth.smtp_auth(message_body, custom_subject):
         return None

    return None

def generate_incident_uuid() -> str:
    return f"""{uuid.uuid4()}"""

def freshdesk_inop_notification(custom_message:str) -> None:
    """
    This method is invoked in the event that a support ticket is unable to generated.
    Instead, a `UUID` is generated to be used as an error identification number.
    This replaces the support ticket which would have normally been generated by the FreskDesk system. 
    Returns:
        None: 
    """  
    
    incident_uuid   =   generate_incident_uuid()
    custom_subject  =   "Error Generating Support Ticket."
    
    freshdesk_inop_text_body = f"""
        Dear {settings_mapper.MESSAGING_METADATA["REQUESTER_NAME"]}<br><br>
        We are writing to you because our support ticketing system is either currently offline or our credentials are invalid.
        ========================================================================<br>
        <table border="0" cellpadding="5" cellspacing="0" style="border-collapse: collapse; text-align: left;">
            <tr>
                <th>Freshdesk Inoperative Reason:</th>
                <td>{custom_message}</td>
            </tr>
            <tr>
                <th>Incident reference Number</th>
                <td>{incident_uuid}</td>
            </tr>
        </table>
        ========================================================================<br><br>
        {company_signoff()}
    """

    print(freshdesk_inop_text_body)
    if not email_auth.smtp_auth(freshdesk_inop_text_body, custom_subject):
         return None

    return None